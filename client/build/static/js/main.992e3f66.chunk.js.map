{"version":3,"sources":["components/NavTabs.js","components/pages/Landing.js","components/pages/Main.js","components/pages/Profile.js","components/pages/Matches.js","components/Container.js","App.js","reportWebVitals.js","index.js"],"names":["NavTabs","currentPage","handlePageChange","className","href","onClick","Landing","Main","Profile","Matches","Container","useState","setCurrentPage","page","httpLink","createHttpLink","uri","authLink","setContext","_","headers","token","localStorage","getItem","authorization","ApolloClient","link","concat","cache","InMemoryCache","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2PA0CeA,MAtCf,YAAqD,IAAlCC,EAAiC,EAAjCA,YAAaC,EAAoB,EAApBA,iBAC9B,OACE,wBAAIC,UAAU,gBACZ,wBAAIA,UAAU,YACZ,uBACEC,KAAK,QACLC,QAAS,kBAAMH,EAAiB,SAGhCC,UAA2B,SAAhBF,EAAyB,kBAAoB,YAL1D,SAUF,wBAAIE,UAAU,YACZ,uBACEC,KAAK,WACLC,QAAS,kBAAMH,EAAiB,YAEhCC,UAA2B,YAAhBF,EAA4B,kBAAoB,YAJ7D,YASF,wBAAIE,UAAU,YACZ,uBACEC,KAAK,WACLC,QAAS,kBAAMH,EAAiB,YAEhCC,UAA2B,YAAhBF,EAA4B,kBAAoB,YAJ7D,cC3BO,SAASK,IACtB,OACE,6BACE,uCACA,kDAGA,oCACA,sCCRS,SAASC,IACtB,OACE,6BACE,wDACA,qCCJS,SAASC,IACtB,OACE,6BACE,4CACA,sDCJS,SAASC,IACtB,OACE,6BACE,uCACA,+CCCS,SAASC,IACtB,MAAsCC,mBAAS,QAA/C,mBAAOV,EAAP,KAAoBW,EAApB,KAoBA,OACE,6BAEE,kBAAC,EAAD,CAASX,YAAaA,EAAaC,iBALd,SAACW,GAAD,OAAUD,EAAeC,MAd5B,YAAhBZ,EACK,kBAACK,EAAD,MAEW,YAAhBL,EACK,kBAACO,EAAD,MAEW,YAAhBP,EACK,kBAACQ,EAAD,MAEW,SAAhBR,EACK,kBAACM,EAAD,WADT,G,oCCREO,EAAWC,YAAe,CAC9BC,IAAK,aAIDC,EAAWC,aAAW,SAACC,EAAD,GAAqB,IAAfC,EAAc,EAAdA,QAE1BC,EAAQC,aAAaC,QAAQ,YAEnC,MAAO,CACLH,QAAQ,2BACHA,GADE,IAELI,cAAeH,EAAK,iBAAaA,GAAU,SAKlC,IAAII,IAAa,CAE9BC,KAAMT,EAASU,OAAOb,GACtBc,MAAO,IAAIC,MASEC,MANf,WACE,OACE,kBAACpB,EAAD,OC1BWqB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,MCAdQ,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.992e3f66.chunk.js","sourcesContent":["import React from 'react';\n\n// Here we are using object destructuring assignment to pluck off our variables from the props object\n// We assign them to their own variable names\nfunction NavTabs({ currentPage, handlePageChange }) {\n  return (\n    <ul className=\"nav nav-tabs\">\n      <li className=\"nav-item\">\n        <a\n          href=\"#main\"\n          onClick={() => handlePageChange('Main')}\n          // This is a conditional (ternary) operator that checks to see if the current page is \"Home or Home\"\n          // If it is, we set the current page to 'nav-link-active', otherwise we set it to 'nav-link'\n          className={currentPage === 'Main' ? 'nav-link active' : 'nav-link'}\n        >\n          Home\n        </a>\n      </li>\n      <li className=\"nav-item\">\n        <a\n          href=\"#profile\"\n          onClick={() => handlePageChange('Profile')}\n          // Check to see if the currentPage is `Profile`, and if so we use the active link class from bootstrap. Otherwise, we set it to a normal nav-link\n          className={currentPage === 'Profile' ? 'nav-link active' : 'nav-link'}\n        >\n          Profile\n        </a>\n      </li>\n      <li className=\"nav-item\">\n        <a\n          href=\"#matches\"\n          onClick={() => handlePageChange('Matches')}\n          // Check to see if the currentPage is `Matches`, and if so we use the active link class from bootstrap. Otherwise, we set it to a normal nav-link\n          className={currentPage === 'Matches' ? 'nav-link active' : 'nav-link'}\n        >\n          Matches\n        </a>\n      </li>\n    </ul>\n  );\n}\n\nexport default NavTabs;\n","import React from 'react';\n\nexport default function Landing() {\n  return (\n    <div>\n      <h1>Landing</h1>\n      <p>\n        Carousel of matches\n      </p>\n      <p>LOGIN</p>\n      <p>SIGNUP</p>\n    </div>\n  );\n}\n","import React from 'react';\n\nexport default function Main() {\n  return (\n    <div>\n      <h1>Welcome to TandemFandom!</h1>\n      <p>\n        STUFF\n      </p>\n    </div>\n  );\n}\n","import React from 'react';\n\nexport default function Profile() {\n  return (\n    <div>\n      <h1>Profile Page</h1>\n      <p>\n        Profile Page goes here\n      </p>\n    </div>\n  );\n}\n","import React from 'react';\n\nexport default function Matches() {\n  return (\n    <div>\n      <h1>Matches</h1>\n      <p>\n        List of Matches\n      </p>\n    </div>\n  );\n}\n","import React, { useState } from 'react';\nimport NavTabs from './NavTabs';\nimport Landing from './pages/Landing';\nimport Main from './pages/Main';\nimport Profile from './pages/Profile';\nimport Matches from './pages/Matches';\n\nexport default function Container() {\n  const [currentPage, setCurrentPage] = useState('Home');\n\n  // This method is checking to see what the value of `currentPage` is. Depending on the value of currentPage, we return the corresponding component to render.\n  const renderPage = () => {\n    if (currentPage === 'Landing') {\n      return <Landing />;\n    }\n    if (currentPage === 'Profile') {\n      return <Profile />;\n    }\n    if (currentPage === 'Matches') {\n      return <Matches />;\n    }\n    if (currentPage === 'Main') {\n      return <Main />;\n    }\n  };\n\n  const handlePageChange = (page) => setCurrentPage(page);\n\n  return (\n    <div>\n      {/* We are passing the currentPage from state and the function to update it */}\n      <NavTabs currentPage={currentPage} handlePageChange={handlePageChange} />\n      {/* Here we are calling the renderPage method which will return a component  */}\n      {renderPage()}\n    </div>\n  );\n}\n","import './App.css';\nimport React from \"react\"\nimport Container from './components/Container';\n\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  createHttpLink,\n} from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\n\n// Construct our main GraphQL API endpoint\nconst httpLink = createHttpLink({\n  uri: '/graphql',\n});\n\n// Construct request middleware that will attach the JWT token to every request as an `authorization` header\nconst authLink = setContext((_, { headers }) => {\n  // get the authentication token from local storage if it exists\n  const token = localStorage.getItem('id_token');\n  // return the headers to the context so httpLink can read them\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : '',\n    },\n  };\n});\n\nconst client = new ApolloClient({\n  // Set up our client to execute the `authLink` middleware prior to making the request to our GraphQL API\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n});\n\nfunction App() {\n  return (\n    <Container />\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}