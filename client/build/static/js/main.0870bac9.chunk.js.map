{"version":3,"sources":["components/NavTabs.js","components/pages/Landing.js","components/pages/Main.js","components/pages/Profile.js","components/pages/Matches.js","components/Container.js","App.js","reportWebVitals.js","index.js"],"names":["NavTabs","currentPage","handlePageChange","className","href","onClick","Landing","Main","Profile","Matches","Container","useState","setCurrentPage","page","httpLink","createHttpLink","uri","authLink","setContext","_","headers","token","localStorage","getItem","authorization","client","ApolloClient","link","concat","cache","InMemoryCache","App","ApolloProvider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2PA0CeA,MAtCf,YAAqD,IAAlCC,EAAiC,EAAjCA,YAAaC,EAAoB,EAApBA,iBAC9B,OACE,wBAAIC,UAAU,gBACZ,wBAAIA,UAAU,YACZ,uBACEC,KAAK,QACLC,QAAS,kBAAMH,EAAiB,SAGhCC,UAA2B,SAAhBF,EAAyB,kBAAoB,YAL1D,SAUF,wBAAIE,UAAU,YACZ,uBACEC,KAAK,WACLC,QAAS,kBAAMH,EAAiB,YAEhCC,UAA2B,YAAhBF,EAA4B,kBAAoB,YAJ7D,YASF,wBAAIE,UAAU,YACZ,uBACEC,KAAK,WACLC,QAAS,kBAAMH,EAAiB,YAEhCC,UAA2B,YAAhBF,EAA4B,kBAAoB,YAJ7D,cC3BO,SAASK,IACtB,OACE,6BACE,uCACA,kDAGA,oCACA,sCCRS,SAASC,IACtB,OACE,6BACE,wDACA,qCCJS,SAASC,IACtB,OACE,6BACE,4CACA,sDCJS,SAASC,IACtB,OACE,6BACE,uCACA,+CCCS,SAASC,IACtB,MAAsCC,mBAAS,QAA/C,mBAAOV,EAAP,KAAoBW,EAApB,KAoBA,OACE,6BAEE,kBAAC,EAAD,CAASX,YAAaA,EAAaC,iBALd,SAACW,GAAD,OAAUD,EAAeC,MAd5B,YAAhBZ,EACK,kBAACK,EAAD,MAEW,YAAhBL,EACK,kBAACO,EAAD,MAEW,YAAhBP,EACK,kBAACQ,EAAD,MAEW,SAAhBR,EACK,kBAACM,EAAD,WADT,G,4CCREO,EAAWC,YAAe,CAC9BC,IAAK,aAIDC,EAAWC,aAAW,SAACC,EAAD,GAAqB,IAAfC,EAAc,EAAdA,QAE1BC,EAAQC,aAAaC,QAAQ,YAEnC,MAAO,CACLH,QAAQ,2BACHA,GADE,IAELI,cAAeH,EAAK,iBAAaA,GAAU,SAK3CI,EAAS,IAAIC,IAAa,CAE9BC,KAAMV,EAASW,OAAOd,GACtBe,MAAO,IAAIC,MAWEC,MARf,WACE,OACE,kBAACC,EAAA,EAAD,CAAgBP,OAAQA,GACtB,kBAACf,EAAD,QC3BSuB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,MCAdQ,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.0870bac9.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n// Here we are using object destructuring assignment to pluck off our variables from the props object\r\n// We assign them to their own variable names\r\nfunction NavTabs({ currentPage, handlePageChange }) {\r\n  return (\r\n    <ul className=\"nav nav-tabs\">\r\n      <li className=\"nav-item\">\r\n        <a\r\n          href=\"#main\"\r\n          onClick={() => handlePageChange('Main')}\r\n          // This is a conditional (ternary) operator that checks to see if the current page is \"Home or Home\"\r\n          // If it is, we set the current page to 'nav-link-active', otherwise we set it to 'nav-link'\r\n          className={currentPage === 'Main' ? 'nav-link active' : 'nav-link'}\r\n        >\r\n          Home\r\n        </a>\r\n      </li>\r\n      <li className=\"nav-item\">\r\n        <a\r\n          href=\"#profile\"\r\n          onClick={() => handlePageChange('Profile')}\r\n          // Check to see if the currentPage is `Profile`, and if so we use the active link class from bootstrap. Otherwise, we set it to a normal nav-link\r\n          className={currentPage === 'Profile' ? 'nav-link active' : 'nav-link'}\r\n        >\r\n          Profile\r\n        </a>\r\n      </li>\r\n      <li className=\"nav-item\">\r\n        <a\r\n          href=\"#matches\"\r\n          onClick={() => handlePageChange('Matches')}\r\n          // Check to see if the currentPage is `Matches`, and if so we use the active link class from bootstrap. Otherwise, we set it to a normal nav-link\r\n          className={currentPage === 'Matches' ? 'nav-link active' : 'nav-link'}\r\n        >\r\n          Matches\r\n        </a>\r\n      </li>\r\n    </ul>\r\n  );\r\n}\r\n\r\nexport default NavTabs;\r\n","import React from 'react';\r\n\r\nexport default function Landing() {\r\n  return (\r\n    <div>\r\n      <h1>Landing</h1>\r\n      <p>\r\n        Carousel of matches\r\n      </p>\r\n      <p>LOGIN</p>\r\n      <p>SIGNUP</p>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\n\r\nexport default function Main() {\r\n  return (\r\n    <div>\r\n      <h1>Welcome to TandemFandom!</h1>\r\n      <p>\r\n        STUFF\r\n      </p>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\n\r\nexport default function Profile() {\r\n  return (\r\n    <div>\r\n      <h1>Profile Page</h1>\r\n      <p>\r\n        Profile Page goes here\r\n      </p>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\n\r\nexport default function Matches() {\r\n  return (\r\n    <div>\r\n      <h1>Matches</h1>\r\n      <p>\r\n        List of Matches\r\n      </p>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from 'react';\r\nimport NavTabs from './NavTabs';\r\nimport Landing from './pages/Landing';\r\nimport Main from './pages/Main';\r\nimport Profile from './pages/Profile';\r\nimport Matches from './pages/Matches';\r\n\r\nexport default function Container() {\r\n  const [currentPage, setCurrentPage] = useState('Home');\r\n\r\n  // This method is checking to see what the value of `currentPage` is. Depending on the value of currentPage, we return the corresponding component to render.\r\n  const renderPage = () => {\r\n    if (currentPage === 'Landing') {\r\n      return <Landing />;\r\n    }\r\n    if (currentPage === 'Profile') {\r\n      return <Profile />;\r\n    }\r\n    if (currentPage === 'Matches') {\r\n      return <Matches />;\r\n    }\r\n    if (currentPage === 'Main') {\r\n      return <Main />;\r\n    }\r\n  };\r\n\r\n  const handlePageChange = (page) => setCurrentPage(page);\r\n\r\n  return (\r\n    <div>\r\n      {/* We are passing the currentPage from state and the function to update it */}\r\n      <NavTabs currentPage={currentPage} handlePageChange={handlePageChange} />\r\n      {/* Here we are calling the renderPage method which will return a component  */}\r\n      {renderPage()}\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react'\r\nimport './App.css';\r\nimport Container from './components/Container';\r\n\r\nimport {\r\n  ApolloClient,\r\n  InMemoryCache,\r\n  ApolloProvider,\r\n  createHttpLink,\r\n} from '@apollo/client';\r\nimport { setContext } from '@apollo/client/link/context';\r\n\r\n// Construct our main GraphQL API endpoint\r\nconst httpLink = createHttpLink({\r\n  uri: '/graphql',\r\n});\r\n\r\n// Construct request middleware that will attach the JWT token to every request as an `authorization` header\r\nconst authLink = setContext((_, { headers }) => {\r\n  // get the authentication token from local storage if it exists\r\n  const token = localStorage.getItem('id_token');\r\n  // return the headers to the context so httpLink can read them\r\n  return {\r\n    headers: {\r\n      ...headers,\r\n      authorization: token ? `Bearer ${token}` : '',\r\n    },\r\n  };\r\n});\r\n\r\nconst client = new ApolloClient({\r\n  // Set up our client to execute the `authLink` middleware prior to making the request to our GraphQL API\r\n  link: authLink.concat(httpLink),\r\n  cache: new InMemoryCache(),\r\n});\r\n\r\nfunction App() {\r\n  return (\r\n    <ApolloProvider client={client}>\r\n      <Container />\r\n    </ApolloProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}